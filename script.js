const API_BASE_URL = 'https://bunny-brave-externally.ngrok-free.app'; 
const tg = window.Telegram.WebApp;

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ò –ó–ê–ì–†–£–ó–ö–ê ---
document.addEventListener('DOMContentLoaded', () => {
    tg.ready();
    tg.expand();
    
    const startParam = tg.initDataUnsafe.start_param;
    route(startParam);

    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    tg.MainButton.hide();
});

function route(param) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));

    if (param === 'profile') {
        loadProfileData();
    } else if (param === 'register') {
        loadRegistrationPage();
    } else {
        loadReadingsData();
    }
}

// --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
let registrationData = {};

function loadRegistrationPage() {
    hideLoader();
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 1 –∏–∑ 4');
    const container = document.getElementById('register-container');
    container.classList.add('active');
    container.innerHTML = `
        <div class="form-step">
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ (–∫–æ—Ä–ø—É—Å):</p>
            <div class="button-grid">
                <button class="grid-button" onclick="handleBuildingSelect('8–í')">8–í</button>
                <button class="grid-button" onclick="handleBuildingSelect('8–ì')">8–ì</button>
                <button class="grid-button" onclick="handleBuildingSelect('8–î')">8–î</button>
            </div>
        </div>
    `;
}

function handleBuildingSelect(building) {
    registrationData.building = building;
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', `–®–∞–≥ 2 –∏–∑ 4: –°—Ç—Ä–æ–µ–Ω–∏–µ ${building}`);
    const container = document.getElementById('register-container');
    container.innerHTML = `
        <div class="form-step">
            <p>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã:</p>
            <input type="number" id="apartment-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 45">
        </div>
    `;
    tg.MainButton.setText('–î–∞–ª–µ–µ').show();
    tg.MainButton.onClick(handleApartmentSubmit);
}

async function handleApartmentSubmit() {
    const apartment = document.getElementById('apartment-input').value;
    if (!apartment || !/^\d+$/.test(apartment)) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã.');
        return;
    }
    registrationData.apartment = apartment;
    tg.MainButton.showProgress();

    try {
        const response = await fetch(`${API_BASE_URL}/api/check-address`, {
            method: 'POST', headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ building: registrationData.building, apartment: registrationData.apartment })
        });
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail);
        }
        await response.json(); // –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω
        renderAccountStep();
    } catch (error) {
        tg.showAlert(error.message);
    } finally {
        tg.MainButton.hideProgress();
    }
}

function renderAccountStep() {
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 3 –∏–∑ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è');
    const container = document.getElementById('register-container');
    container.innerHTML = `
        <div class="form-step">
            <p>–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>6-–∑–Ω–∞—á–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç</b>.</p>
            <input type="number" id="account-input" placeholder="000000" maxlength="6">
        </div>
    `;
    tg.MainButton.setText('–î–∞–ª–µ–µ').show();
    tg.MainButton.offClick(handleApartmentSubmit);
    tg.MainButton.onClick(handleAccountSubmit);
}

function handleAccountSubmit() {
    const account = document.getElementById('account-input').value;
    if (!account || !/^\d{6}$/.test(account)) {
        tg.showAlert('–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 6 —Ü–∏—Ñ—Ä.');
        return;
    }
    registrationData.account = account;
    renderEmailStep();
}

function renderEmailStep() {
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 4 –∏–∑ 4: –ö–æ–Ω—Ç–∞–∫—Ç—ã');
    const container = document.getElementById('register-container');
    container.innerHTML = `
        <div class="form-step">
            <p>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.</p>
            <input type="email" id="email-input" placeholder="user@example.com">
        </div>
    `;
    tg.MainButton.setText('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é').show();
    tg.MainButton.offClick(handleAccountSubmit);
    tg.MainButton.onClick(handleFinalSubmit);
}

async function handleFinalSubmit() {
    const email = document.getElementById('email-input').value;
    if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        tg.showAlert('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email.');
        return;
    }
    registrationData.email = email || null;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è
    tg.showConfirm("–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", async (isConfirmed) => {
        if (isConfirmed) {
            tg.MainButton.showProgress();
            try {
                const response = await fetch(`${API_BASE_URL}/api/register`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json', 'Authorization': `tma ${tg.initData}`},
                    body: JSON.stringify(registrationData)
                });
                if (!response.ok) { const err = await response.json(); throw new Error(err.detail); }
                tg.showAlert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                tg.close();
            } catch (error) {
                tg.showAlert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            } finally {
                tg.MainButton.hideProgress();
            }
        } else {
            tg.showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        }
    });
}

// --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–ï–†–ï–î–ê–ß–ò –ü–û–ö–ê–ó–ê–ù–ò–ô ---

async function loadReadingsData() {
    setHeader('–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    showLoader();
    try {
        const response = await fetch(`${API_BASE_URL}/api/get-meters`, {
            headers: { 'Authorization': `tma ${tg.initData}` }
        });
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        
        const data = await response.json();
        renderReadingsPage(data);
    } catch (error) {
        handleError(error.message);
    }
}

function renderReadingsPage(data) {
    const metersContainer = document.getElementById('meters-container');
    metersContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ª–æ–∞–¥–µ—Ä

    setHeader('–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π', `—É–ª. –í–∞—Ö–æ–≤–∞, –¥. ${data.address.building}, –∫–≤. ${data.address.apartment}`);

    if (data.meters.length === 0) {
        metersContainer.innerHTML = '<p>–î–ª—è –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç—á–∏–∫–æ–≤.</p>';
        return;
    }

    data.meters.forEach(meter => {
        const card = document.createElement('div');
        card.className = 'meter-card';
        card.innerHTML = `
            <div class="meter-title">${meter.meter_type === '–ì–í–°' ? 'üî•' : '‚ùÑÔ∏è'} ${meter.meter_type}</div>
            <div class="meter-info">–ó–∞–≤–æ–¥—Å–∫–æ–π ‚Ññ ${meter.factory_number}</div>
            <div class="input-group">
                <label for="meter_${meter.id}">–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–ø—Ä–æ—à–ª—ã–µ: ${meter.last_reading.toFixed(3).replace('.', ',')})</label>
                <input type="text" id="meter_${meter.id}" inputmode="decimal" placeholder="12345,123">
                <div class="consumption-info" id="consumption_${meter.id}"></div>
            </div>
        `;
        metersContainer.appendChild(card);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ "–Ω–∞ –ª–µ—Ç—É"
        const input = card.querySelector(`#meter_${meter.id}`);
        input.addEventListener('input', () => {
            const consumptionDiv = card.querySelector(`#consumption_${meter.id}`);
            const currentValue = parseFloat(input.value.replace(',', '.'));
            if (!isNaN(currentValue)) {
                const consumption = currentValue - meter.last_reading;
                consumptionDiv.textContent = `–†–∞—Å—Ö–æ–¥: ${consumption.toFixed(3).replace('.', ',')} –º¬≥`;
            } else {
                consumptionDiv.textContent = '';
            }
        });
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram
    tg.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è');
    tg.MainButton.show();
    tg.onEvent('mainButtonClicked', submitReadings);
}

async function submitReadings() {
    const payload = { readings: [] };
    const inputs = document.querySelectorAll('input[type="text"]');
    let hasErrors = false;

    inputs.forEach(input => {
        const meterId = parseInt(input.id.split('_')[1]);
        const valueStr = input.value.replace(',', '.').trim();
        
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
        if (valueStr === '') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è

        const value = parseFloat(valueStr);
        if (isNaN(value) || !/^\d{1,5}\.\d{3}$/.test(valueStr)) {
            tg.showAlert(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Å ID ${meterId}. –ü—Ä–∏–º–µ—Ä: 12345,123`);
            hasErrors = true;
            return;
        }
        payload.readings.push({ meter_id: meterId, value: value });
    });

    if (hasErrors || payload.readings.length === 0) {
        if (!hasErrors) tg.showAlert('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è.');
        return;
    }

    tg.MainButton.showProgress();
    tg.MainButton.disable();

    try {
        const response = await fetch(`${API_BASE_URL}/api/submit-readings`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `tma ${tg.initData}`
            },
            body: JSON.stringify(payload)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');

        tg.showAlert('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        tg.close();
    } catch (error) {
        tg.showAlert(`‚ùå ${error.message}`);
    } finally {
        tg.MainButton.hideProgress();
        tg.MainButton.enable();
    }
}


// --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–û–§–ò–õ–Ø ---

async function loadProfileData() {
    setHeader('–ü—Ä–æ—Ñ–∏–ª—å', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    showLoader();
    try {
        const response = await fetch(`${API_BASE_URL}/api/get-profile`, {
            headers: { 'Authorization': `tma ${tg.initData}` }
        });
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        
        const data = await response.json();
        renderProfilePage(data);
    } catch (error) {
        handleError(error.message);
    }
}

function renderProfilePage(data) {
    document.getElementById('meters-container').innerHTML = ''; // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä/—Ñ–æ—Ä–º—ã
    const profileContainer = document.getElementById('profile-container');
    profileContainer.classList.remove('hidden');

    setHeader('–ü—Ä–æ—Ñ–∏–ª—å', `—É–ª. –í–∞—Ö–æ–≤–∞, –¥. ${data.address.building}, –∫–≤. ${data.address.apartment}`);

    let profileHTML = `
        <div class="profile-section">
            <p><strong>–õ–æ–≥–∏–Ω:</strong> ${data.user.login}</p>
            <p><strong>Email:</strong> ${data.user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</strong> <code>${data.address.account_number}</code></p>
        </div>
    `;

    profileHTML += `<div class="history-section"><h3>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π</h3>`;
    if (data.meters.length > 0) {
        data.meters.forEach(meter => {
            profileHTML += `<h4>${meter.meter_type === '–ì–í–°' ? 'üî•' : '‚ùÑÔ∏è'} ${meter.meter_type} (‚Ññ ${meter.factory_number})</h4>`;
            if (meter.history.length > 0) {
                meter.history.forEach(rec => {
                    profileHTML += `
                        <div class="history-item">
                            <strong>–ü–µ—Ä–∏–æ–¥: ${rec.period}</strong><br>
                            –ü–æ–∫–∞–∑–∞–Ω–∏–µ: ${rec.curr_reading.toFixed(3).replace('.',',')} (–†–∞—Å—Ö–æ–¥: ${rec.consumption.toFixed(3).replace('.',',')} –º¬≥)
                        </div>
                    `;
                });
            } else {
                profileHTML += `<div class="history-item">–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.</div>`;
            }
        });
    } else {
        profileHTML += `<p>–°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>`;
    }
    profileHTML += `</div>`;
    
    profileContainer.innerHTML = profileHTML;

    // –ö–Ω–æ–ø–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. Mini App –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    tg.MainButton.hide();
}


// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

function setHeader(title, address) { document.getElementById('header-title').textContent = title; document.getElementById('header-address').textContent = address; }
function showLoader() { document.getElementById('loader-container').classList.add('active'); }
function hideLoader() { document.getElementById('loader-container').classList.remove('active'); }
function handleError(message) { hideLoader(); const container = document.getElementById('error-container'); container.classList.add('active'); container.innerHTML = `<p style="text-align: center; color: red;">${message}</p>`; tg.MainButton.hide();}