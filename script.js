// –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ngrok, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –µ–≥–æ –ê–ö–¢–£–ê–õ–¨–ù–´–ô HTTPS URL
const API_BASE_URL = 'https://your-ngrok-url.ngrok-free.app'; 

const tg = window.Telegram.WebApp;

// --- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API ---
async function apiFetch(endpoint, options = {}) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const headers = {
        'Content-Type': 'application/json',
        'Authorization': `tma ${tg.initData}`,
        'ngrok-skip-browser-warning': 'true' // –ì–æ–≤–æ—Ä–∏–º ngrok –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    };

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ç–µ–º–∏, —á—Ç–æ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã
    const config = {
        ...options,
        headers: {
            ...headers,
            ...options.headers,
        },
    };

    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (response.ok) {
        if (response.status === 204) return null; // No Content
        return response.json();
    } else {
        try {
            const errorData = await response.json();
            throw new Error(errorData.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
        } catch (e) {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –Ω–µ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, HTML –æ—Ç ngrok), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
        }
    }
}

// --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ---
document.addEventListener('DOMContentLoaded', () => {
    tg.ready();
    tg.expand();
    const startParam = tg.initDataUnsafe.start_param || '';
    route(startParam);
    tg.MainButton.hide();
});

function route(param) {
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    showLoader();
    if (param === 'profile') loadProfileData();
    else if (param === 'register') loadRegistrationPage();
    else loadReadingsData();
}

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
let regData = {};
function loadRegistrationPage() {
    hideLoader();
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 1 –∏–∑ 4');
    const container = document.getElementById('register-container');
    container.classList.add('active');
    container.innerHTML = `<div class="form-step"><p>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ:</p><div class="button-grid">
        <button class="grid-button" onclick="selectBuilding('8–í')">8–í</button>
        <button class="grid-button" onclick="selectBuilding('8–ì')">8–ì</button>
        <button class="grid-button" onclick="selectBuilding('8–î')">8–î</button></div></div>`;
}
function selectBuilding(building) {
    regData.building = building;
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', `–®–∞–≥ 2 –∏–∑ 4: –°—Ç—Ä–æ–µ–Ω–∏–µ ${building}`);
    const cont = document.getElementById('register-container');
    cont.innerHTML = `<div class="form-step"><p>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:</p><input type="number" id="apartment-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 45" inputmode="numeric"></div>`;
    tg.MainButton.setText('–î–∞–ª–µ–µ').show().onClick(submitApartment);
}
async function submitApartment() {
    const apartment = document.getElementById('apartment-input').value;
    if (!apartment || !/^\d+$/.test(apartment)) { tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã.'); return; }
    regData.apartment = apartment;
    tg.MainButton.showProgress().disable();
    try {
        await apiFetch('/api/check-address', { 
            method: 'POST', 
            body: JSON.stringify(regData) 
        });
        renderAccountStep();
    } catch (error) { tg.showAlert(error.message);
    } finally { tg.MainButton.hideProgress().enable(); }
}
function renderAccountStep() {
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 3 –∏–∑ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è');
    const cont = document.getElementById('register-container');
    cont.innerHTML = `<div class="form-step"><p>–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>6-–∑–Ω–∞—á–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç</b>.</p><input type="number" id="account-input" placeholder="000000" maxlength="6" inputmode="numeric"></div>`;
    tg.MainButton.offClick(submitApartment).onClick(submitAccount);
}
function submitAccount() {
    const account = document.getElementById('account-input').value;
    if (!account || !/^\d{6}$/.test(account)) { tg.showAlert('–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä.'); return; }
    regData.account = account;
    renderEmailStep();
}
function renderEmailStep() {
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 4 –∏–∑ 4: –ö–æ–Ω—Ç–∞–∫—Ç—ã');
    const cont = document.getElementById('register-container');
    cont.innerHTML = `<div class="form-step"><p>Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</p><input type="email" id="email-input" placeholder="user@example.com" inputmode="email"></div>`;
    tg.MainButton.setText('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é').offClick(submitAccount).onClick(finalSubmit);
}
async function finalSubmit() {
    const email = document.getElementById('email-input').value;
    if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) { tg.showAlert('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email.'); return; }
    regData.email = email || null;
    tg.showConfirm("–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", async (ok) => {
        if (!ok) { tg.showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.'); return; }
        tg.MainButton.showProgress().disable();
        try {
            await apiFetch('/api/register', { 
                method: 'POST', 
                body: JSON.stringify(regData) 
            });
            tg.showAlert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            tg.close();
        } catch (error) { tg.showAlert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        } finally { tg.MainButton.hideProgress().enable(); }
    });
}

// --- –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π ---
async function loadReadingsData() {
    setHeader('–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    try {
        const data = await apiFetch('/api/get-meters');
        hideLoader();
        renderReadingsPage(data);
    } catch (error) {
        handleError(error.message);
    }
}
function renderReadingsPage(data) {
    const metersContainer = document.getElementById('readings-container');
    metersContainer.innerHTML = '';
    metersContainer.classList.add('active');
    setHeader('–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π', `—É–ª. –í–∞—Ö–æ–≤–∞, –¥. ${data.address.building}, –∫–≤. ${data.address.apartment}`);
    if (data.meters.length === 0) {
        metersContainer.innerHTML = '<p>–î–ª—è –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç—á–∏–∫–æ–≤.</p>';
        return;
    }
    data.meters.forEach(meter => {
        const card = document.createElement('div');
        card.className = 'meter-card';
        card.innerHTML = `
            <div class="meter-title">${meter.meter_type === '–ì–í–°' ? 'üî•' : '‚ùÑÔ∏è'} ${meter.meter_type}</div>
            <div class="meter-info">–ó–∞–≤–æ–¥—Å–∫–æ–π ‚Ññ ${meter.factory_number}</div>
            <div class="input-group">
                <label for="meter_${meter.id}">–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–ø—Ä–æ—à–ª—ã–µ: ${meter.last_reading.toFixed(3).replace('.', ',')})</label>
                <input type="text" id="meter_${meter.id}" inputmode="decimal" placeholder="12345,123">
                <div class="consumption-info" id="consumption_${meter.id}"></div>
            </div>`;
        metersContainer.appendChild(card);
        const input = card.querySelector(`#meter_${meter.id}`);
        input.addEventListener('input', () => {
            const consumptionDiv = card.querySelector(`#consumption_${meter.id}`);
            const currentValue = parseFloat(input.value.replace(',', '.'));
            if (!isNaN(currentValue)) {
                const consumption = currentValue - meter.last_reading;
                consumptionDiv.textContent = `–†–∞—Å—Ö–æ–¥: ${consumption.toFixed(3).replace('.', ',')} –º¬≥`;
            } else { consumptionDiv.textContent = ''; }
        });
    });
    tg.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è').show().onClick(submitReadings);
}
async function submitReadings() {
    const payload = { readings: [] };
    const inputs = document.querySelectorAll('#readings-container input[type="text"]');
    let hasErrors = false;
    inputs.forEach(input => {
        const meterId = parseInt(input.id.split('_')[1]);
        const valueStr = input.value.replace(',', '.').trim();
        if (valueStr === '') return;
        if (!/^\d{1,5}\.\d{3}$/.test(valueStr)) {
            tg.showAlert(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ ‚Ññ${meterId}. –ü—Ä–∏–º–µ—Ä: 123,456`);
            hasErrors = true; return;
        }
        payload.readings.push({ meter_id: meterId, value: parseFloat(valueStr) });
    });
    if (hasErrors || payload.readings.length === 0) {
        if (!hasErrors) tg.showAlert('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è.'); return;
    }
    tg.MainButton.showProgress().disable();
    try {
        await apiFetch('/api/submit-readings', {
            method: 'POST',
            body: JSON.stringify(payload)
        });
        tg.showAlert('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        tg.close();
    } catch (error) { tg.showAlert(`‚ùå ${error.message}`);
    } finally { tg.MainButton.hideProgress().enable(); }
}

// --- –ü—Ä–æ—Ñ–∏–ª—å –∏ –ò—Å—Ç–æ—Ä–∏—è ---
async function loadProfileData() {
    setHeader('–ü—Ä–æ—Ñ–∏–ª—å', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    try {
        const data = await apiFetch('/api/get-profile');
        hideLoader();
        renderProfilePage(data);
    } catch (error) {
        handleError(error.message);
    }
}
function renderProfilePage(data) {
    const profileContainer = document.getElementById('profile-container');
    profileContainer.classList.add('active');
    setHeader('–ü—Ä–æ—Ñ–∏–ª—å', `—É–ª. –í–∞—Ö–æ–≤–∞, –¥. ${data.address.building}, –∫–≤. ${data.address.apartment}`);
    let profileHTML = `<div class="profile-section">
            <p><strong>–õ–æ–≥–∏–Ω:</strong> ${data.user.login}</p>
            <p><strong>Email:</strong> ${data.user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</strong> <code>${data.address.account_number}</code></p>
        </div>`;
    profileHTML += `<div class="history-section"><h3>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π</h3>`;
    if (data.meters.length > 0) {
        data.meters.forEach(meter => {
            profileHTML += `<h4>${meter.meter_type === '–ì–í–°' ? 'üî•' : '‚ùÑÔ∏è'} ${meter.meter_type} (‚Ññ ${meter.factory_number})</h4>`;
            if (meter.history.length > 0) {
                meter.history.forEach(rec => {
                    profileHTML += `<div class="history-item"><strong>–ü–µ—Ä–∏–æ–¥: ${rec.period}</strong><br>
                        –ü–æ–∫–∞–∑–∞–Ω–∏–µ: ${rec.curr_reading.toFixed(3).replace('.',',')} (–†–∞—Å—Ö–æ–¥: ${rec.consumption.toFixed(3).replace('.',',')} –º¬≥)</div>`;
                });
            } else { profileHTML += `<div class="history-item">–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.</div>`; }
        });
    } else { profileHTML += `<p>–°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>`; }
    profileHTML += `</div>`;
    profileContainer.innerHTML = profileHTML;
    tg.MainButton.hide();
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function setHeader(t, a) { document.getElementById('header-title').textContent = t; document.getElementById('header-address').textContent = a; }
function showLoader() { document.querySelectorAll('.page').forEach(p => p.classList.remove('active')); document.getElementById('loader-container').classList.add('active'); }
function hideLoader() { document.getElementById('loader-container').classList.remove('active'); }
function handleError(m) { hideLoader(); const c = document.getElementById('error-container'); c.classList.add('active'); c.innerHTML = `<p style="text-align: center; color: red;">${m}</p>`; tg.MainButton.hide(); }