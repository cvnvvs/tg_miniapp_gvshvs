const tg = window.Telegram.WebApp;

// –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ngrok, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –µ–≥–æ HTTPS URL
const API_BASE_URL = 'https://bunny-brave-externally.ngrok-free.app';
const API_HEADERS = {
    'Content-Type': 'application/json',
    'ngrok-skip-browser-warning': 'true'
};

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
document.addEventListener('DOMContentLoaded', () => {
    tg.ready();
    tg.expand();
    const startParam = tg.initDataUnsafe.start_param;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∂–∞—Ç—å
    if (startParam === 'profile') {
        loadProfileData();
    } else if (startParam === 'register') {
        renderRegistrationForm();
    } else {
        loadReadingsData();
    }
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function setHeader(title, address = '') {
    document.getElementById('header-title').textContent = title;
    document.getElementById('header-address').textContent = address;
}

function showLoader(text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const container = document.getElementById('meters-container');
    container.innerHTML = `<div class="loader-container"><div class="loader"></div><p>${text}</p></div>`;
    document.getElementById('profile-container').classList.add('hidden');
    tg.MainButton.hide();
}

function handleError(message, containerId = 'meters-container') {
    const container = document.getElementById(containerId);
    container.innerHTML = `<p class="error-message">‚ùå ${message}</p>`;
    tg.MainButton.hide();
}


// --- –õ–û–ì–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (–®–∞–≥ 1, 2, 3) ---
function renderRegistrationForm() {
    setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ');
    const container = document.getElementById('meters-container');
    container.innerHTML = `
        <div class="form-step" id="step-1">
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ</h3>
            <div class="button-group">
                <button class="btn-building" data-building="8–í">–î–æ–º 8–í</button>
                <button class="btn-building" data-building="8–ì">–î–æ–º 8–ì</button>
                <button class="btn-building" data-building="8–î">–î–æ–º 8–î</button>
            </div>
        </div>
        <div class="form-step hidden" id="step-2">
            <h3>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã</h3>
            <div class="input-group">
                <label for="apartment">–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input type="number" id="apartment" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 45" inputmode="numeric">
            </div>
            <div class="button-group">
                <button id="btn-check-address">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å</button>
            </div>
        </div>
        <div class="form-step hidden" id="step-3">
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç</h3>
            <div class="input-group">
                <label for="account">–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç (6 —Ü–∏—Ñ—Ä)</label>
                <input type="number" id="account" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 020045" inputmode="numeric">
            </div>
             <div class="input-group">
                <label for="email">Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                <input type="email" id="email" placeholder="user@example.com" inputmode="email">
            </div>
            <div class="policy-container">
                <p>–ù–∞–∂–∏–º–∞—è "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
            </div>
        </div>
    `;
    
    document.querySelectorAll('.btn-building').forEach(btn => {
        btn.addEventListener('click', () => {
            window.building = btn.dataset.building;
            document.getElementById('step-1').classList.add('hidden');
            document.getElementById('step-2').classList.remove('hidden');
            setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', `–®–∞–≥ 2: –î–æ–º ${window.building}`);
        });
    });

    document.getElementById('btn-check-address').addEventListener('click', async () => {
        const apartment = document.getElementById('apartment').value;
        if (!apartment) { tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã.'); return; }

        showLoader('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞...');
        try {
            const response = await fetch(`${API_BASE_URL}/api/check-address`, {
                method: 'POST', headers: API_HEADERS,
                body: JSON.stringify({ building: window.building, apartment })
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞.');
            }
            window.apartment = apartment;
            document.getElementById('step-2').classList.add('hidden');
            document.getElementById('step-3').classList.remove('hidden');
            setHeader('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', `–®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ`);
            tg.MainButton.setText('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è').show();
            tg.onEvent('mainButtonClicked', submitRegistration);
        } catch (error) {
            handleError(error.message);
        }
    });
}

async function submitRegistration() {
    const account = document.getElementById('account').value;
    const email = document.getElementById('email').value;

    if (account.length !== 6 || !/^\d+$/.test(account)) {
        tg.showAlert('–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 6 —Ü–∏—Ñ—Ä.'); return;
    }

    tg.MainButton.showProgress().disable();
    try {
        const response = await fetch(`${API_BASE_URL}/api/register`, {
            method: 'POST', headers: { ...API_HEADERS, 'Authorization': `tma ${tg.initData}` },
            body: JSON.stringify({
                building: window.building,
                apartment: window.apartment,
                account: account,
                email: email || null
            })
        });
         if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
        }
        tg.showAlert('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.');
        tg.close();
    } catch (error) {
        tg.showAlert(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
    } finally {
        tg.MainButton.hideProgress().enable();
    }
}


// --- –õ–û–ì–ò–ö–ê –ü–ï–†–ï–î–ê–ß–ò –ü–û–ö–ê–ó–ê–ù–ò–ô ---
async function loadReadingsData() {
    setHeader('–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    showLoader();
    try {
        const response = await fetch(`${API_BASE_URL}/api/get-meters`, {
            headers: { 'Authorization': `tma ${tg.initData}`, 'ngrok-skip-browser-warning': 'true' }
        });
        if (response.status === 404) {
             handleError('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.');
             return;
        }
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        
        const data = await response.json();
        renderReadingsPage(data);
    } catch (error) {
        handleError(error.message);
    }
}

function renderReadingsPage(data) {
    const metersContainer = document.getElementById('meters-container');
    metersContainer.innerHTML = ''; 

    setHeader('–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π', `—É–ª. –í–∞—Ö–æ–≤–∞, –¥. ${data.address.building}, –∫–≤. ${data.address.apartment}`);

    if (data.meters.length === 0) {
        metersContainer.innerHTML = '<p>–î–ª—è –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç—á–∏–∫–æ–≤.</p>';
        return;
    }

    data.meters.forEach(meter => {
        const card = document.createElement('div');
        card.className = 'meter-card';
        card.innerHTML = `
            <div class="meter-title">${meter.meter_type === '–ì–í–°' ? 'üî•' : '‚ùÑÔ∏è'} ${meter.meter_type}</div>
            <div class="meter-info">–ó–∞–≤–æ–¥—Å–∫–æ–π ‚Ññ ${meter.factory_number}</div>
            <div class="input-group">
                <label for="meter_${meter.id}">–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–ø—Ä–æ—à–ª—ã–µ: ${meter.last_reading.toFixed(3).replace('.', ',')})</label>
                <input type="text" id="meter_${meter.id}" inputmode="decimal" placeholder="12345,123">
                <div class="consumption-info" id="consumption_${meter.id}"></div>
            </div>
        `;
        metersContainer.appendChild(card);

        const input = card.querySelector(`#meter_${meter.id}`);
        input.addEventListener('input', () => {
            const consumptionDiv = card.querySelector(`#consumption_${meter.id}`);
            const currentValue = parseFloat(input.value.replace(',', '.'));
            if (!isNaN(currentValue)) {
                const consumption = currentValue - meter.last_reading;
                consumptionDiv.textContent = `–†–∞—Å—Ö–æ–¥: ${consumption.toFixed(3).replace('.', ',')} –º¬≥`;
            } else {
                consumptionDiv.textContent = '';
            }
        });
    });

    tg.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è');
    tg.MainButton.show();
    tg.onEvent('mainButtonClicked', submitReadings);
}

async function submitReadings() {
    const payload = { readings: [] };
    const inputs = document.querySelectorAll('input[type="text"]');
    let hasErrors = false;

    inputs.forEach(input => {
        const meterId = parseInt(input.id.split('_')[1]);
        const valueStr = input.value.replace(',', '.').trim();
        if (valueStr === '') return;
        const value = parseFloat(valueStr);
        if (isNaN(value) || !/^\d{1,5}\.\d{3}$/.test(valueStr)) {
            tg.showAlert(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Å –∑–∞–≤–æ–¥—Å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü—Ä–∏–º–µ—Ä: 12345,123`);
            hasErrors = true;
            return;
        }
        payload.readings.push({ meter_id: meterId, value: value });
    });

    if (hasErrors || payload.readings.length === 0) {
        if (!hasErrors) tg.showAlert('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è.');
        return;
    }

    tg.MainButton.showProgress().disable();
    try {
        const response = await fetch(`${API_BASE_URL}/api/submit-readings`, {
            method: 'POST',
            headers: { 'Authorization': `tma ${tg.initData}`, 'Content-Type': 'application/json', 'ngrok-skip-browser-warning': 'true'},
            body: JSON.stringify(payload)
        });
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
        tg.showAlert('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        tg.close();
    } catch (error) {
        tg.showAlert(`‚ùå ${error.message}`);
    } finally {
        tg.MainButton.hideProgress().enable();
    }
}


// --- –õ–û–ì–ò–ö–ê –ü–†–û–§–ò–õ–Ø ---
async function loadProfileData() {
    setHeader('–ü—Ä–æ—Ñ–∏–ª—å', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    showLoader();
    try {
        const response = await fetch(`${API_BASE_URL}/api/get-profile`, {
            headers: { 'Authorization': `tma ${tg.initData}`, 'ngrok-skip-browser-warning': 'true' }
        });
        if (response.status === 404) {
             handleError('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.');
             return;
        }
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        const data = await response.json();
        renderProfilePage(data);
    } catch (error) {
        handleError(error.message);
    }
}

function renderProfilePage(data) {
    document.getElementById('meters-container').innerHTML = '';
    const profileContainer = document.getElementById('profile-container');
    profileContainer.classList.remove('hidden');

    setHeader('–ü—Ä–æ—Ñ–∏–ª—å', `—É–ª. –í–∞—Ö–æ–≤–∞, –¥. ${data.address.building}, –∫–≤. ${data.address.apartment}`);

    let profileHTML = `
        <div class="profile-section">
            <p><strong>–õ–æ–≥–∏–Ω:</strong> ${data.user.login}</p>
            <p><strong>Email:</strong> ${data.user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p><strong>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</strong> <code>${data.address.account_number}</code></p>
        </div>
        <div class="history-section"><h3>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π</h3>`;
    if (data.meters.length > 0) {
        data.meters.forEach(meter => {
            profileHTML += `<h4>${meter.meter_type === '–ì–í–°' ? 'üî•' : '‚ùÑÔ∏è'} ${meter.meter_type} (‚Ññ ${meter.factory_number})</h4>`;
            if (meter.history.length > 0) {
                meter.history.forEach(rec => {
                    profileHTML += `<div class="history-item"><strong>–ü–µ—Ä–∏–æ–¥: ${rec.period}</strong><br>
                                    –ü–æ–∫–∞–∑–∞–Ω–∏–µ: ${rec.curr_reading.toFixed(3).replace('.',',')} (–†–∞—Å—Ö–æ–¥: ${rec.consumption.toFixed(3).replace('.',',')} –º¬≥)</div>`;
                });
            } else { profileHTML += `<div class="history-item">–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.</div>`; }
        });
    } else { profileHTML += `<p>–°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>`; }
    profileHTML += `</div>`;
    profileContainer.innerHTML = profileHTML;
    tg.MainButton.hide();
}